https://ideone.com/03jJI0






#include "bits/stdc++.h"

#define endl '\n'

using namespace std;
typedef long long ll;
const int N = 1e5 + 7, M = 2 * N, SEGN = 4 * N;

// a1 a2 x + (a1 b2 + b1)
int seg[SEGN];
int a[N], n;

void build(int si = 0, int ss = 0, int se = n - 1){
    if (ss == se){
       seg[si] = a[ss];
       return;
    }
    int md = ss + (se - ss) / 2, lf = 2 * si + 1, rt = 2 * si + 2;


    build(lf, ss, md);
    build(rt, md + 1, se);
    seg[si] = seg[lf] + seg[rt];
}

int query(int qs, int qe, int si = 0, int ss = 0, int se = n - 1){
    if (ss > qe || se < qs || qe < qs)
        return 0;
    if (ss >= qs && se <= qe)
        return seg[si];

    int md = ss + (se - ss) / 2, rt = 2 * si + 1, lf = rt++;
    return query(qs, qe, lf, ss, md) + query(qs, qe, rt, md + 1, se);
}

void update(int qi, int v, int si = 0, int ss = 0, int se = n - 1){
    if(ss == se){
        seg[si] = v;
        return;
    }

    int md = ss + (se - ss) / 2, rt = 2 * si + 1, lf = rt++;
    if (qi <= md)
        update(qi, v, lf, ss, md);
    else
        update(qi, v, rt, md+1, se);
}

int walk(int v, int si = 0, int ss = 0, int se = n - 1){
    if (ss == se){
        if (seg[si] < v) return -1;
        return ss;
    }

    int md = ss + (se - ss) / 2, rt = 2 * si + 1, lf = rt++;
    if (seg[lf] >= v)
        return walk(v, lf, ss, md);
    else
        return walk(v - seg[lf], rt, md + 1, se);
}
