template<typename T, class CMP = function<T(const T &, const T &)>>
class SparseTable {
public:
    int n{};
    vector<vector<T>> sp;
    CMP func;
 
    void build(const vector<T> &a, const CMP &f) {
        func = f;
        n = static_cast<int>(a.size());
        int max_log = 32 - __builtin_clz(n);
        sp.resize(max_log);
        sp[0] = a;
        for (int j = 1; j < max_log; ++j) {
            sp[j].resize(n - (1 << j) + 1);
            for (int i = 0; i <= n - (1 << j); ++i) {
                sp[j][i] = func(sp[j - 1][i], sp[j - 1][i + (1 << (j - 1))]);
            }
        }
    }
 
    T query(int l, int r) const {
        int lg = 32 - __builtin_clz(r - l + 1) - 1;
        return func(sp[lg][l], sp[lg][r - (1 << lg) + 1]);
    }
};

-------------------------------------------------------------------------


ll merge(ll a, ll b) {
    return a&b;
}

ll T[N][30], n, arr[N], q;

void build() {
    for (int i = 0; i <= n; ++i) {
        T[i][0] = arr[i];
    }

    for (int pw = 1; (1 << pw) <= n; pw++) { //nLog(n)

        for (int i = 0; i + (1 << pw) <= n; ++i) {
            T[i][pw] = merge(T[i][pw - 1], T[i + (1 << (pw - 1))][pw - 1]);
        }
    }
}

ll query(int l, int r) { //Log(N)
    int sz = r - l + 1; // looping on the binary representation of the query size

    ll ret = lloo;

    for (int i = 29; i >= 0; --i) {
        if ((sz >> i) & 1) {
            ret = merge(ret, T[l][i]);
            l += (1 << i);
        }
    }
    return ret;
}
