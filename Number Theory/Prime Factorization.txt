//O(sqrt(n))
vector<int> factorize(int n) {
    vector<int> ret;
    for (int i = 2; i <= n / i; i += 1 + (i & 1)) {
        while (n % i == 0) {
            ret.push_back(i);
            n /= i;
        }
    }
    if (n > 1)
        ret.push_back(n);
    return ret;
}





---------------------------------------------------------------
------------(total time log(n) for factorization)--------------

" modified sieve gives u smallest factor for every number "

int comp[NN];
//roughly O(N log N)
void modified_sieve() {
    //for(int i = 0; i < NN; ++i) comp[i] = i;
    iota(comp, comp + NN, 0);
    comp[0] = comp[1] = -1;
    for (int i = 2; i < NN / i; ++i)
        if (comp[i] == i)
            for (int j = i * i; j < NN; j += i)
                if (comp[j] == j)
                    comp[j] = i;
}
//log(n)
vector<int> factorize_log(int n) {
    vector<int> ret;
    while (n > 1) {
        ret.push_back(comp[n]);
        n /= comp[n];
    }
    return ret;
}